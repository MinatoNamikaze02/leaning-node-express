{"version":3,"sources":["components/note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","updatedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObj","date","Date","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAkBeA,EAfF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBAEXC,EAAQF,EAAKG,UAAY,qBAAuB,iBAGtD,OACG,8BACC,+BACKH,EAAKI,QAAS,IACf,wBAAQC,QAASJ,EAAjB,SAAoCC,U,gBCX1CI,EAAU,aAkBD,EAhBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAKA,EAASC,SAc/B,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAKA,EAASC,SAS/B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAKA,EAASC,SCRxCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,qBAAKC,UAAU,QAAf,SACGD,KAIDE,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,gDAkGSC,EA7FH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,cAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KASAC,qBAPa,WACXC,IAEG1B,MAAK,SAAA2B,GACJT,EAASS,QAGC,IAGhB,IAqCMC,EAAcP,EAClBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAuB,IAAnBA,EAAKG,aAS5B,OAEE,gCACE,uCACA,cAAC,EAAD,CAAcc,QAASe,IACvB,8BACE,yBAAQ3B,QAAS,kBAAM0B,GAAYD,IAAnC,kBACQA,EAAU,YAAa,WAGjC,oBAAIZ,UAAU,OAAd,SACGmB,EAAYE,KAAI,SAAAvC,GAAI,OACnB,cAAC,EAAD,CAAsBA,KAAOA,EAAMC,iBAAkB,kBA5ClC,SAACa,GAE1B,IAAMd,EAAO0B,EAAMc,MAAK,SAAAC,GAAC,OAAEA,EAAE3B,KAAKA,KAC5B4B,EAAW,2BAAO1C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CgC,EACUrB,EAAI4B,GACXjC,MAAK,SAAAkC,GACJhB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAGA,EAAKc,KAAKA,EAAId,EAAM2C,SAE/CC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJjC,EAAKI,QADD,sCAGf0C,YAAW,WACTb,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE3B,KAAKA,SA2B2BiC,CAAmB/C,EAAKc,MAAtEd,EAAKc,SAItB,uBAAMkC,SAhEM,SAACC,GAEfA,EAAMC,iBACN,IAAMC,EAAU,CACd/C,QAAUwB,EACVwB,KAAO,IAAIC,KACXlD,UAAYmD,KAAKC,SAAW,IAE9BpB,EACUgB,GACP1C,MAAK,SAAAkC,GACJhB,EAASD,EAAM8B,OAAOb,IACtBd,EAAW,QAoDb,UACE,uBAAO4B,MAAO7B,EAAS8B,SAxBJ,SAACT,GAE1BU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB5B,EAAWoB,EAAMY,OAAOJ,UAsBlB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC5GNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a7809c97.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n\r\n    const label = note.important ? 'Make not important' : 'make important'\r\n\r\n\r\n    return(\r\n       <div>\r\n        <li>\r\n            {note.content}{\" \"}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Note;","import axios from \"axios\";\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response =>  response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response =>  response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response =>  response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update }","\nimport {React, useState, useEffect} from \"react\"\n\nimport Note from \"./components/note\"\n\nimport noteService from \"./services/notes\";\n\nconst Notification = ({ message }) => {\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Footer....</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('A new note');\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n  \n \n  const addNote = (event) => {\n\n    event.preventDefault()\n    const noteObj = {\n      content : newNote,\n      date : new Date(),\n      important : Math.random() < 0.5,\n    }\n    noteService\n      .create(noteObj)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n    \n  }\n  const toggleImportanceOf = (id) => {\n\n    const note = notes.find(n=>n.id===id)\n    const updatedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, updatedNote)\n      .then(returnedNote =>{\n        setNotes(notes.map(note=> note.id!==id? note: returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id!==id))\n      })\n\n  }\n  const notesToShow = showAll \n  ? notes \n  : notes.filter(note => note.important === true)\n\n  const handleNoteChange = (event) => {\n\n  console.log(event.target.value);\n  setNewNote(event.target.value)\n\n  }\n\n  return (\n\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important': 'all'}\n        </button>\n      </div>\n      <ul className=\"note\">\n        {notesToShow.map(note=>\n          <Note key = {note.id} note= {note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n          )\n        }\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n\n  )\n\n\n\n}\n\nexport default App;","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}